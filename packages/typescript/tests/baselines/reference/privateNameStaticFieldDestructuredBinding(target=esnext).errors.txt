tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDestructuredBinding.ts(2,21): error TS2805: Static fields with private names can't have initializers when the '--useDefineForClassFields' flag is not specified with a '--target' of 'esnext'. Consider adding the '--useDefineForClassFields' flag.


==== tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDestructuredBinding.ts (1 errors) ====
    class A {
        static #field = 1;
                        ~
!!! error TS2805: Static fields with private names can't have initializers when the '--useDefineForClassFields' flag is not specified with a '--target' of 'esnext'. Consider adding the '--useDefineForClassFields' flag.
        otherClass = A;
        testObject() {
            return { x: 10, y: 6 };
        }
        testArray() {
            return [10, 11];
        }
        constructor() {
            let y: number;
            ({ x: A.#field, y } = this.testObject());
            ([A.#field, y] = this.testArray());
            ({ a: A.#field, b: [A.#field] } = { a: 1, b: [2] });
            [A.#field, [A.#field]] = [1, [2]];
            ({ a: A.#field = 1, b: [A.#field = 1] } = { b: [] });
            [A.#field = 2] = [];
            [this.otherClass.#field = 2] = [];
        }
        static test(_a: typeof A) {
            [_a.#field] = [2];
        }
    }
    