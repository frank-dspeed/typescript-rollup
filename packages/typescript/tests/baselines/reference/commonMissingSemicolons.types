=== tests/cases/compiler/commonMissingSemicolons.ts ===
async function myAsyncFunction1() {}
>myAsyncFunction1 : () => Promise<void>

asynd function myAsyncFunction2() {}
>asynd : any
>myAsyncFunction2 : () => void

sasync function myAsyncFunction3() {}
>sasync : any
>myAsyncFunction3 : () => void

// Arrow functions don't (yet?) parse as nicely as standalone functions.
// Eventually it would be good to get them the same "did you mean" for typos such as "asyncd".
const myAsyncArrow1 = async () => 3;
>myAsyncArrow1 : () => Promise<number>
>async () => 3 : () => Promise<number>
>3 : 3

const myAsyncArrow2 = asyncd () => 3;
>myAsyncArrow2 : any
>asyncd () : any
>asyncd : any
>3 : 3

class MyClass1 {}
>MyClass1 : MyClass1

clasd MyClass2 {}
>clasd : any
>MyClass2 : any

classs MyClass3 {}
>classs : any
>MyClass3 : any

const myConst1 = 1;
>myConst1 : 1
>1 : 1

consd myConst2 = 1;
>consd : any
>myConst2 = 1 : 1
>myConst2 : any
>1 : 1

constd myConst3 = 1;
>constd : any
>myConst3 = 1 : 1
>myConst3 : any
>1 : 1

declare const myDeclareConst1: 1;
>myDeclareConst1 : 1

declared const myDeclareConst2: 1;
>declared : any
>myDeclareConst2 : 1

declare constd myDeclareConst3: 1;
>declare : any
>constd : any
>myDeclareConst3 : any
>1 : 1

declared constd myDeclareConst4: 1;
>declared : any
>constd : any
>myDeclareConst4 : any
>1 : 1

declareconst myDeclareConst5;
>declareconst : any
>myDeclareConst5 : any

function myFunction1() { }
>myFunction1 : () => void

functiond myFunction2() { }
>functiond : any
>myFunction2() : any
>myFunction2 : any

function function() { }
> : () => any
> : () => any

functionMyFunction;
>functionMyFunction : any

interface myInterface1 { }
interfaced myInterface2 { }
>interfaced : any
>myInterface2 : any

interface interface { }
interface { }
>interface : any

interface void { }
>interface : any
>void { } : undefined
>{ } : {}

interfaceMyInterface { }
>interfaceMyInterface : any

let let = 1;
>let : number
>1 : 1

let let1 = 1;
>let1 : number
>1 : 1

letd let2 = 1;
>letd : any
>let2 = 1 : 1
>let2 : any
>1 : 1

letMyLet;
>letMyLet : any

type type;
>type : any

type type1 = {};
>type1 : type1

type type2 = type;
>type2 : any

type type3 = {};
>type3 : type3

typed type4 = {}
>typed : any
>type4 = {} : {}
>type4 : any
>{} : {}

typed type5 = type;
>typed : any
>type5 = type : any
>type5 : any
>type : any

typeMyType;
>typeMyType : any

var myVar1 = 1;
>myVar1 : number
>1 : 1

vard myVar2 = 1;
>vard : any
>myVar2 = 1 : 1
>myVar2 : any
>1 : 1

varMyVar;
>varMyVar : any

