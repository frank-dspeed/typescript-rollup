=== tests/cases/conformance/jsdoc/declarations/folder/mod1.js ===
/**
 * @typedef {{x: number}} Item
 */
/**
 * @type {Item};
 */
const x = {x: 12};
>x : Item
>{x: 12} : { x: number; }
>x : number
>12 : 12

module.exports = x;
>module.exports = x : { x: number; }
>module.exports : { x: number; }
>module : { exports: { x: number; }; }
>exports : { x: number; }
>x : Item

=== tests/cases/conformance/jsdoc/declarations/index.js ===
/** @type {(typeof import("./folder/mod1"))[]} */
const items = [{x: 12}];
>items : import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]
>[{x: 12}] : { x: number; }[]
>{x: 12} : { x: number; }
>x : number
>12 : 12

module.exports = items;
>module.exports = items : { [n: number]: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; length: number; toString(): string; toLocaleString(): string; pop(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; push(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; concat(...items: ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; concat(...items: (import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item | ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>)[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; join(separator?: string): string; reverse(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; shift(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; slice(start?: number, end?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; sort(compareFn?: (a: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, b: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item) => number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount: number, ...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; unshift(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; indexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; lastIndexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; every<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; some(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, thisArg?: any): U[]; filter<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; }
>module.exports : { [n: number]: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; length: number; toString(): string; toLocaleString(): string; pop(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; push(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; concat(...items: ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; concat(...items: (import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item | ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>)[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; join(separator?: string): string; reverse(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; shift(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; slice(start?: number, end?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; sort(compareFn?: (a: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, b: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item) => number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount: number, ...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; unshift(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; indexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; lastIndexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; every<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; some(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, thisArg?: any): U[]; filter<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; }
>module : { exports: { [n: number]: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; length: number; toString(): string; toLocaleString(): string; pop(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; push(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; concat(...items: ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; concat(...items: (import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item | ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>)[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; join(separator?: string): string; reverse(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; shift(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; slice(start?: number, end?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; sort(compareFn?: (a: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, b: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item) => number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount: number, ...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; unshift(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; indexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; lastIndexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; every<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; some(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, thisArg?: any): U[]; filter<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; }; }
>exports : { [n: number]: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; length: number; toString(): string; toLocaleString(): string; pop(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; push(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; concat(...items: ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; concat(...items: (import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item | ConcatArray<import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>)[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; join(separator?: string): string; reverse(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; shift(): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; slice(start?: number, end?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; sort(compareFn?: (a: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, b: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item) => number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount?: number): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; splice(start: number, deleteCount: number, ...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; unshift(...items: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]): number; indexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; lastIndexOf(searchElement: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, fromIndex?: number): number; every<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; some(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, thisArg?: any): U[]; filter<S extends import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item>(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, index: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => unknown, thisArg?: any): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduce<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight(callbackfn: (previousValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, initialValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item): import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item; reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item, currentIndex: number, array: import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]) => U, initialValue: U): U; }
>items : import("tests/cases/conformance/jsdoc/declarations/folder/mod1").Item[]

