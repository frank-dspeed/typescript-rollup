=== tests/cases/conformance/classes/constructorDeclarations/superCalls/emitCodeBeforeSuperCall.ts ===
// TODO: With false, master is correct for `Test` but incorrect for `Sub`.
// `Test` is correct because classic emit doesn't emit for definition and `Test`
// doesn't need to emit any code for initialisation because it's already
// part of the user code

class Base {
>Base : Symbol(Base, Decl(emitCodeBeforeSuperCall.ts, 0, 0))
}
class Sub extends Base {
>Sub : Symbol(Sub, Decl(emitCodeBeforeSuperCall.ts, 6, 1))
>Base : Symbol(Base, Decl(emitCodeBeforeSuperCall.ts, 0, 0))

    // @ts-ignore
    constructor(public p: number) {
>p : Symbol(Sub.p, Decl(emitCodeBeforeSuperCall.ts, 9, 16))

        console.log('hi');
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

        super();
>super : Symbol(Base, Decl(emitCodeBeforeSuperCall.ts, 0, 0))
    }
    field = 0;
>field : Symbol(Sub.field, Decl(emitCodeBeforeSuperCall.ts, 12, 5))
}

class Test extends Base {
>Test : Symbol(Test, Decl(emitCodeBeforeSuperCall.ts, 14, 1))
>Base : Symbol(Base, Decl(emitCodeBeforeSuperCall.ts, 0, 0))

    prop: number;
>prop : Symbol(Test.prop, Decl(emitCodeBeforeSuperCall.ts, 16, 25))

    // @ts-ignore
    constructor(public p: number) {
>p : Symbol(Test.p, Decl(emitCodeBeforeSuperCall.ts, 19, 16))

        1; // Any statements here break it
        super();
>super : Symbol(Base, Decl(emitCodeBeforeSuperCall.ts, 0, 0))

        this.prop = 1;
>this.prop : Symbol(Test.prop, Decl(emitCodeBeforeSuperCall.ts, 16, 25))
>this : Symbol(Test, Decl(emitCodeBeforeSuperCall.ts, 14, 1))
>prop : Symbol(Test.prop, Decl(emitCodeBeforeSuperCall.ts, 16, 25))
    }
}

