=== tests/cases/conformance/classes/constructorDeclarations/superCalls/emitCodeBeforeSuperCall.ts ===
// TODO: With false, master is correct for `Test` but incorrect for `Sub`.
// `Test` is correct because classic emit doesn't emit for definition and `Test`
// doesn't need to emit any code for initialisation because it's already
// part of the user code

class Base {
>Base : Base
}
class Sub extends Base {
>Sub : Sub
>Base : Base

    // @ts-ignore
    constructor(public p: number) {
>p : number

        console.log('hi');
>console.log('hi') : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>'hi' : "hi"

        super();
>super() : void
>super : typeof Base
    }
    field = 0;
>field : number
>0 : 0
}

class Test extends Base {
>Test : Test
>Base : Base

    prop: number;
>prop : number

    // @ts-ignore
    constructor(public p: number) {
>p : number

        1; // Any statements here break it
>1 : 1

        super();
>super() : void
>super : typeof Base

        this.prop = 1;
>this.prop = 1 : 1
>this.prop : number
>this : this
>prop : number
>1 : 1
    }
}

