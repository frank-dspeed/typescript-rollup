=== tests/cases/conformance/declarationEmit/index.ts ===
export * from "./nested";
No type information for this code.
No type information for this code.=== tests/cases/conformance/declarationEmit/nested/base.ts ===
import { B } from "./shared";
>B : typeof B

export function f() {
>f : () => B

    return new B();
>new B() : B
>B : typeof B
}

=== tests/cases/conformance/declarationEmit/nested/derived.ts ===
import { f } from "./base";
>f : () => import("tests/cases/conformance/declarationEmit/index").B

export function g() {
>g : () => import("tests/cases/conformance/declarationEmit/index").B

    return f();
>f() : import("tests/cases/conformance/declarationEmit/index").B
>f : () => import("tests/cases/conformance/declarationEmit/index").B
}

=== tests/cases/conformance/declarationEmit/nested/index.ts ===
export * from "./base";
No type information for this code.export * from "./derived";
No type information for this code.export * from "./shared";
No type information for this code.
No type information for this code.=== tests/cases/conformance/declarationEmit/nested/shared.ts ===
export class B {}
>B : B

